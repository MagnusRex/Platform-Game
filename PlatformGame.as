package {	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.utils.getTimer;		public class PlatformGame extends MovieClip {		// movement constants		static const gravity:Number = .004;				// screen constants		static const edgeDistance:Number = 200;		static const vertDistance:Number = 150;		// object arrays		private var fixedObjects:Array;		private var solidObjects:Array;		private var otherObjects:Array;		private var doorObjects:Array;		private var ladderObjects:Array;		private var ladderTopObjects:Array;		private var deathObjects:Array;		private var backgroundObjects:Array;		private var allObjects:Array;				// hero and enemies and objects		private var hero:Object;		private var enemies:Array;				// game state		private var playerObjects:Array;		private var gameScore:int;		private var gameMode:String = "start";		private var playerLives:int;		private var lastTime:Number = 0;				// double jump		private var spacePressedNum:int;				// Parallax scrolling 		private var moveBackUp:Boolean;		private var moveBackDown:Boolean;		private var moveBackLeft:Boolean;		private var moveBackRight:Boolean;		private var gamelevelDY:Number = 0;				// Switch and Blockade		private var blockadeOpen:Boolean;				// start game		public function startPlatformGame() {			playerObjects = new Array();			gameScore = 0;			gameMode = "play";			playerLives = 3;		}				// start level		public function startGameLevel() {						// create characters			createHero();			addEnemies();						// examine level and note all objects			examineLevel();						// add listeners			this.addEventListener(Event.ENTER_FRAME,gameLoop);			stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownFunction);			stage.addEventListener(KeyboardEvent.KEY_UP,keyUpFunction);						// set game state			gameMode = "play";			addScore(0);			showLives();		}				// creates the hero object and sets all properties		public function createHero() {			hero = new Object();			hero.mc = gamelevel.hero;			hero.dx = 0.0;			hero.dy = 0.0;			hero.inAir = false;			hero.direction = 1;			hero.animstate = "stand";			hero.walkAnimation = new Array(2,3,4,5,6,7,8);			hero.animstep = 0;			hero.jump = false;			hero.moveLeft = false;			hero.moveRight = false;			hero.isSprinting = false;			hero.onLadder = false;			hero.ladderMain = false;			hero.ladderTop = false;			hero.climbUp = false;			hero.climbDown = false;			hero.climbSpeed = .01;			hero.jumpSpeed = .8;			hero.walkSpeed = .2;			hero.sprintSpeed = .35;			hero.width = 20.0;			hero.height = 40.0;			hero.startx = hero.mc.x;			hero.starty = hero.mc.y;		}				// finds all enemies in the level and creates an object for each		public function addEnemies() {			enemies = new Array();			var i:int = 1;			while (true) {				if (gamelevel["enemy"+i] == null) break;				var enemy = new Object();				enemy.mc = gamelevel["enemy"+i];				enemy.dx = 0.0;				enemy.dy = 0.0;				enemy.inAir = false;				enemy.direction = 1;				enemy.animstate = "stand"				enemy.walkAnimation = new Array(2,3,4,5);				enemy.animstep = 0;				enemy.jump = false;				enemy.moveRight = true;				enemy.moveLeft = false;				enemy.climbUp = false;				enemy.climbDown = false;				enemy.jumpSpeed = 1.0;				enemy.walkSpeed = .08;				enemy.width = 30.0;				enemy.height = 30.0;				enemies.push(enemy);				i++;			}		}				// look at all level children and note walls, floors, items, ladders, and spikes		public function examineLevel() {						fixedObjects = new Array();			solidObjects = new Array();			otherObjects = new Array();			doorObjects = new Array();			ladderObjects = new Array();			ladderTopObjects = new Array();			deathObjects = new Array();			backgroundObjects = new Array();						// Place all objects in an array to be able to clean up between levels 			allObjects = new Array();						for(var i:int=0;i<this.gamelevel.numChildren;i++) {				var mc = this.gamelevel.getChildAt(i);								// add floors and walls to fixedObjects				if ((mc is Floor) || (mc is Wall) || (mc is Blockade)) {					var floorObject:Object = new Object();					floorObject.mc = mc;					floorObject.leftside = mc.x;					floorObject.rightside = mc.x+mc.width;					floorObject.topside = mc.y;					floorObject.bottomside = mc.y+mc.height;					fixedObjects.push(floorObject);					allObjects.push(floorObject);								} else if (mc is Block) {					var solidObject:Object = new Object();					solidObject.mc = mc;					solidObject.leftside = mc.x;					solidObject.rightside = mc.x+mc.width;					solidObject.topside = mc.y;					solidObject.bottomside = mc.y+mc.height;					solidObjects.push(solidObject);					allObjects.push(solidObject);								// add Mushroom, key and door to otherOjects				} else if ((mc is Mushroom) || (mc is Key) || (mc is Chest) || (mc is Feather) || (mc is Switch)) {					otherObjects.push(mc);					allObjects.push(mc);									} else if ((mc is Door1) || (mc is Door3) || (mc is Door4) || (mc is Door5) || (mc is Door6) || (mc is Door7)) {					doorObjects.push(mc);					allObjects.push(mc);								// add ladders to ladderObjects				} else if (mc is Ladder) {					var ladderObject:Object = new Object();					ladderObject.mc = mc;					ladderObject.leftside = mc.x - mc.width/2;					ladderObject.rightside = mc.x + mc.width/2;					ladderObject.topside = mc.y - mc.height;					ladderObject.bottomside = mc.y;					ladderObjects.push(ladderObject);					allObjects.push(ladderObject);								} else if (mc is LadderTop) {					var ladderTopObject:Object = new Object();					ladderTopObject.mc = mc;					ladderTopObject.leftside = mc.x - mc.width/2;					ladderTopObject.rightside = mc.x + mc.width/2;					ladderTopObject.topside = mc.y - mc.height;					ladderTopObject.bottomside = mc.y;					ladderTopObjects.push(ladderTopObject);					allObjects.push(ladderTopObject);									} else if (mc is Spikes) {					deathObjects.push(mc);					allObjects.push(mc);				} 			}						//add Backgrounds to allObjects array			allObjects.push(treeF);			allObjects.push(treeM);			allObjects.push(treeB);			allObjects.push(starsB);			allObjects.push(backTree);			allObjects.push(caveF);			allObjects.push(caveM);			allObjects.push(backCave);		}				// note key presses, set hero properties		public function keyDownFunction(event:KeyboardEvent) {			 // don't move until in play mode			if (gameMode != "play") return;			// Move left w/ left arrow or A 			if ((event.keyCode == 37) || (event.keyCode == 65)) {				hero.moveLeft = true;				// Hero not on ladder if moving left				hero.onLadder = false; 			// Move right w/ right arrow or D			} else if ((event.keyCode == 39) || (event.keyCode == 68)) {				hero.moveRight = true;				// Hero not on ladder if moving right				hero.onLadder = false;  			// Jump			} else if (event.keyCode == 32) {				if (!hero.inAir) {					hero.jump = true;					spacePressedNum = 1;					trace("jump 1");								// double Jump				} else if (spacePressedNum == 1) {					hero.jump = true;					trace("jump 2");					// If player doesn't have feather then only two jumps					if (playerObjects.indexOf("Feather") == -1) {						spacePressedNum = 0;						trace("no feather");									// If player has feather then can do 3 jumps						} else {						spacePressedNum = 2;						trace("you have the feather");												/*if(playerObjects.indexOf("feather") == 1) {							spacePressedNum = 2;							This is for unlimited jump.						} */					}				// After third jump, reset jumps to 0					} else if (spacePressedNum == 2) {					hero.jump = true;					spacePressedNum = 0;					trace("Finished jump");				}						// Sprinting			} else if (event.keyCode == 16) { 				hero.isSprinting = true;						// Climb up ladder w/ up arrow or W			} else if ((event.keyCode == 38) || (event.keyCode == 87)) { 				hero.climbUp = true;						// Climb down ladder or enter door w/ down arrow or S			} else if ((event.keyCode == 40) || (event.keyCode == 83)) {				hero.climbDown = true;			}					}				public function keyUpFunction(event:KeyboardEvent) {			if ((event.keyCode == 37) || (event.keyCode == 65)) {				hero.moveLeft = false;			} else if ((event.keyCode == 39) || (event.keyCode == 68)) {				hero.moveRight = false;			} else if (event.keyCode == 16) {				hero.isSprinting = false;			} else if ((event.keyCode == 38) || (event.keyCode == 87)) {				hero.climbUp = false;			} else if ((event.keyCode == 40) || (event.keyCode == 83)) {				hero.climbDown = false;			}		}				// perform all game tasks		public function gameLoop(event:Event) {						// get time differentce			if (lastTime == 0) lastTime = getTimer();			var timeDiff:int = getTimer()-lastTime;			lastTime += timeDiff;						// only perform tasks if in play mode			if (gameMode == "play") {				moveCharacter(hero,timeDiff);				moveEnemies(timeDiff);				checkCollisions();				scrollWithHero(timeDiff);				parallaxScroll(timeDiff);				climbLadder();			}		}				// loop through all enemies and move them		public function moveEnemies(timeDiff:int) {			for(var i:int=0;i<enemies.length;i++) {								// move				moveCharacter(enemies[i],timeDiff);								// if hit a wall, turn around				if (enemies[i].hitWallRight) {					enemies[i].moveLeft = true;					enemies[i].moveRight = false;				} else if (enemies[i].hitWallLeft) {					enemies[i].moveLeft = false;					enemies[i].moveRight = true;				}			}		}				// primary function for character movement		public function moveCharacter(char:Object,timeDiff:Number) {			if (timeDiff < 1) return;						// react to changes from key presses			var horizontalChange = 0;			var newAnimState:String = "stand";			var newDirection:int = char.direction;						if (char.moveLeft) {				// walk left				horizontalChange = -char.walkSpeed*timeDiff;				newAnimState = "walk";				newDirection = -1;				if (char.isSprinting) { 					horizontalChange = -char.sprintSpeed*timeDiff;				} 			} else if (char.moveRight) {				// walk right				horizontalChange = char.walkSpeed*timeDiff;				newAnimState = "walk";				newDirection = 1;				if (char.isSprinting) {					horizontalChange = char.sprintSpeed*timeDiff;				}			}									if (char.onLadder) {				// If on ladder, gravity does not pull down				var verticalChange:Number = char.dy*timeDiff;							} else if (!char.onLadder) {				// assume character pulled down by gravity				verticalChange = char.dy*timeDiff + timeDiff*gravity;				if (verticalChange > 13.0) verticalChange = 13.0;				char.dy += timeDiff*gravity;			}						if (char.jump) {				// start jump				char.jump = false;				char.dy = -char.jumpSpeed;				verticalChange = -char.jumpSpeed;				newAnimState = "jump";			} 					// assume no wall hit, and hanging in air			char.hitWallRight = false;			char.hitWallLeft = false;			char.inAir = true;						// find new vertical position			var newY:Number = char.mc.y + verticalChange;															// loop through all fixed objects to see if character has landed BLOCKS COLLISION 			for(var i:int=0;i<fixedObjects.length;i++) {				// if character is on the top of the ladder then he can pass through the top of the blocks 				if (char.ladderTop) {					break;				// if character is not on ladderTop then he won't fall through the floor				} else {					// check to see if character is standing between the left and right side of the object					if ((char.mc.x+char.width/2 > fixedObjects[i].leftside) && (char.mc.x-char.width/2 < fixedObjects[i].rightside)) {						// Stop character from falling through the floor						if ((char.mc.y <= fixedObjects[i].topside) && (newY > fixedObjects[i].topside)) {							newY = fixedObjects[i].topside;							char.dy = 0;							char.inAir = false;							break;								    }					}				} 			}						// loop through all the solid objects to see if character is jumping up into or landed			for(i=0;i<solidObjects.length;i++) {				// if character is on the top of the ladder then he can pass through the top of the blocks 				if (char.ladderTop) {					break;				} else if (char.ladderMain) {					// check to see if character is standing between the left and right side of the object					if ((char.mc.x+char.width/2 > solidObjects[i].leftside) && (char.mc.x-char.width/2 < solidObjects[i].rightside)) {						// Stop character from falling through floor						if ((char.mc.y <= solidObjects[i].topside) && (newY > solidObjects[i].topside)) {							newY = solidObjects[i].topside;							char.dy = 0;							char.inAir = false;							break;						}					}				} else {					// check to see if character is standing between the left and right side of the object					if ((char.mc.x+char.width/2 > solidObjects[i].leftside) && (char.mc.x-char.width/2 < solidObjects[i].rightside)) {						// Stop character from falling through floor						if ((char.mc.y <= solidObjects[i].topside) && (newY > solidObjects[i].topside)) {							newY = solidObjects[i].topside;							char.dy = 0;							char.inAir = false;							break;						}						// Stop character from jumping through the bottom of the object						if ((char.mc.y - char.height >= solidObjects[i].bottomside) && (newY - char.height < solidObjects[i].bottomside)) {							newY = solidObjects[i].bottomside + char.height;							char.dy = .5;							char.inAir = true;						}					}				}			}									// find new horizontal position			var newX:Number = char.mc.x + horizontalChange;								// Climbing the ladder - Char is colliding with ladder and not jumping			if (char.canClimb && !char.jump) {				// if Up key pressed - Climb up				if (char.climbUp) {					char.onLadder = true;					char.dy = -char.climbSpeed*timeDiff;									// if Down key pressed - Climb down				} else if (char.climbDown) {					char.onLadder = true;					char.dy = char.climbSpeed*timeDiff;								// In order to stop the character from falling without a button press				} else if (!char.climbUp) {					char.dy = 0;					char.onLadder = true;				} else if (!char.climbDown) {					char.dy = 0;					char.onLadder = true;				}			// if no longer colliding the hero is no longer on the ladder			} else if (!char.canClimb) {					char.onLadder = false;			}						// loop through all objects to see if character has bumped into a wall			for(i=0;i<fixedObjects.length;i++) {				if ((newY > fixedObjects[i].topside) && (newY-char.height < fixedObjects[i].bottomside)) {					if ((char.mc.x-char.width/2 >= fixedObjects[i].rightside) && (newX-char.width/2 <= fixedObjects[i].rightside)) {						newX = fixedObjects[i].rightside+char.width/2;						char.hitWallLeft = true;						break;					}					if ((char.mc.x+char.width/2 <= fixedObjects[i].leftside) && (newX+char.width/2 >= fixedObjects[i].leftside)) {						newX = fixedObjects[i].leftside-char.width/2;						char.hitWallRight = true;						break;					}				}			}									// set position of character			char.mc.x = newX;			char.mc.y = newY;						// set animation state			if (char.inAir) {				newAnimState = "jump";			}			char.animstate = newAnimState;						// move along walk cycle			if (char.animstate == "walk") {				char.animstep += timeDiff/60;				if (char.animstep > char.walkAnimation.length) {					char.animstep = 0;				}				char.mc.gotoAndStop(char.walkAnimation[Math.floor(char.animstep)]);							// not walking, show stand or jump state			} else {				char.mc.gotoAndStop(char.animstate);			}						// changed directions			if (newDirection != char.direction) {				char.direction = newDirection;				char.mc.scaleX = char.direction;			}		}				public function climbLadder() {						for(var i:int=ladderTopObjects.length-1;i>=0;i--) {				if ((hero.mc.x+hero.width/2 > ladderTopObjects[i].leftside) && (hero.mc.x-hero.width/2 < ladderTopObjects[i].rightside)) {					if ((hero.mc.y > ladderTopObjects[i].topside) && (hero.mc.y < ladderTopObjects[i].bottomside)) {						if (hero.climbDown) {							hero.canClimb = true;							hero.jump = false;							hero.inAir = false;							hero.onLadder = true;							hero.ladderMain = false;							hero.ladderTop = true;							break;						}					}				} else {					hero.canClimb = false;					hero.onLadder = false;					hero.ladderTop = false;				}			}								for(i=ladderObjects.length-1;i>=0;i--) {				if ((hero.mc.x+hero.width/2 > ladderObjects[i].leftside) && (hero.mc.x-hero.width/2 < ladderObjects[i].rightside)) {					if ((hero.mc.y > ladderObjects[i].topside) && (hero.mc.y < ladderObjects[i].bottomside)) {						hero.canClimb = true;						hero.jump = false;						hero.inAir = false;						hero.onLadder = true;						hero.ladderMain = true;						hero.ladderTop = false;						break;					}				} else {					hero.canClimb = false;					hero.onLadder = false;					hero.ladderMain = false;						}			}		}				// scroll to the right or left, up or down if needed		public function scrollWithHero(timeDiff:Number) { 			// Horizontal			var stagePosition:Number = gamelevel.x+hero.mc.x;			var rightEdge:Number = stage.stageWidth-edgeDistance;			var leftEdge:Number = edgeDistance;			// Vertical 			var vertPosition:Number = gamelevel.y+hero.mc.y;			var topEdge:Number = vertDistance;			var bottomEdge:Number = stage.stageHeight-vertDistance;			// Horizontal scrolling 			if (stagePosition > rightEdge) {				gamelevel.x -= (stagePosition-rightEdge);				moveBackRight = true;				if (gamelevel.x < -(gamelevel.width-stage.stageWidth)) {					gamelevel.x = -(gamelevel.width-stage.stageWidth);					moveBackRight = false;				}			} else {				moveBackRight = false;			}			if (stagePosition < leftEdge) {				gamelevel.x += (leftEdge-stagePosition);				moveBackLeft = true;				if (gamelevel.x > 0) {					gamelevel.x = 0;					moveBackLeft = false;				}			} else {				moveBackLeft = false;			}						// Vertical scrolling			// If playing level one, vertical scrolling won't begin until character moves down ladder to Cave			if (MovieClip(root).currentFrame == 2) {				if (hero.mc.y < 400) {					gamelevel.y = 0;				} else if (hero.mc.y > 400) {					// Stage will stop scrolling at the bottom of the level					if (vertPosition > bottomEdge) {						var startGamelevelY:Number = gamelevel.y;						gamelevel.y -= (vertPosition-bottomEdge);						var diffGamelevelY:Number = startGamelevelY - gamelevel.y;						gamelevelDY = diffGamelevelY/timeDiff;						moveBackDown = true;						if (gamelevel.y < -(gamelevel.height-stage.stageHeight)) {							gamelevel.y = -(gamelevel.height-stage.stageHeight);							moveBackDown = false;						}					} else {						moveBackDown = false;					}					// If in cave, vertical scrolling will stop at the top of the cave					if (vertPosition < topEdge) {						startGamelevelY = gamelevel.y;						gamelevel.y += (topEdge-vertPosition);						diffGamelevelY = gamelevel.y - startGamelevelY;						gamelevelDY = diffGamelevelY/timeDiff;						moveBackUp = true;						if (gamelevel.y > -400) {							gamelevel.y = -400;							moveBackUp = false;						}					} else {						moveBackUp = false;					}				} 			} else {				// Stage will stop scrolling at the bottom of the level				if (vertPosition > bottomEdge) {					startGamelevelY = gamelevel.y;					gamelevel.y -= (vertPosition-bottomEdge);					diffGamelevelY = startGamelevelY - gamelevel.y;					gamelevelDY = diffGamelevelY/timeDiff;					moveBackDown = true;					if (gamelevel.y < -(gamelevel.height-stage.stageHeight)) {						gamelevel.y = -(gamelevel.height-stage.stageHeight);						moveBackDown = false;					}				} else {					moveBackDown = false;				}				// If in cave, vertical scrolling will stop at the top of the cave				if (vertPosition < topEdge) {					startGamelevelY = gamelevel.y;					gamelevel.y += (topEdge-vertPosition);					diffGamelevelY = gamelevel.y - startGamelevelY;					gamelevelDY = diffGamelevelY/timeDiff;					moveBackUp = true;					if (gamelevel.y > 0) {						gamelevel.y = 0;						moveBackUp = false;					}				} else {					moveBackUp = false;				}			}		}				public function parallaxScroll(timeDiff:Number) {						// Only if on the first level			if (MovieClip(root).currentFrame == 2) {				// Background for tree part visible				if (hero.mc.y < 400) {					treeF.visible = true;					treeM.visible = true;					treeB.visible = true;					backTree.visible = true;					starsB.visible = true; //stars								    //background for caves invisible 					caveF.visible = false;					caveM.visible = false;					backCave.visible = false;								// If in the caves 				} else if (hero.mc.y > 400) {					//trees are invisible					treeF.visible = false;					treeM.visible = false;					treeB.visible = false;					backTree.visible = false;					starsB.visible = false; //stars				    					//caves visible 					caveF.visible = true;					caveM.visible = true;					backCave.visible = true;								}						}			if (MovieClip(root).currentFrame == 2) {					// Stop scrolling if collding with wall 				if ((hero.hitWallRight) || (hero.hitWallLeft)) {						return;				} else if (hero.moveRight && moveBackRight) {					//Scroll at the sprint speed of character is sprinting 					if (hero.isSprinting) {						treeF.x -= (hero.sprintSpeed*timeDiff)*.7;						treeM.x -= (hero.sprintSpeed*timeDiff)*.5;						treeB.x -= (hero.sprintSpeed*timeDiff)*.35;						starsB.x -= (hero.sprintSpeed*timeDiff)*.2;												caveF.x -= (hero.sprintSpeed*timeDiff)*.7;						caveM.x -= (hero.sprintSpeed*timeDiff)*.5;						backCave.x -= (hero.sprintSpeed*timeDiff)*.1;											} else {						//scroll at walk speed if walking 						treeF.x -= (hero.walkSpeed*timeDiff)*.7;						treeM.x -= (hero.walkSpeed*timeDiff)*.5;						treeB.x -= (hero.walkSpeed*timeDiff)*.35;						starsB.x -= (hero.walkSpeed*timeDiff)*.2;												caveF.x -= (hero.walkSpeed*timeDiff)*.7;						caveM.x -= (hero.walkSpeed*timeDiff)*.5;						backCave.x -= (hero.walkSpeed*timeDiff)*.1;											}				} else if (hero.moveLeft && moveBackLeft) {					if (hero.isSprinting) {						treeF.x += (hero.sprintSpeed*timeDiff)*.7;						treeM.x += (hero.sprintSpeed*timeDiff)*.5;						treeB.x += (hero.sprintSpeed*timeDiff)*.35;						starsB.x += (hero.sprintSpeed*timeDiff)*.2;												caveF.x += (hero.sprintSpeed*timeDiff)*.7;						caveM.x += (hero.sprintSpeed*timeDiff)*.5;						backCave.x += (hero.sprintSpeed*timeDiff)*.1;											} else {						treeF.x += (hero.walkSpeed*timeDiff)*.7;						treeM.x += (hero.walkSpeed*timeDiff)*.5;						treeB.x += (hero.walkSpeed*timeDiff)*.35;						starsB.x += (hero.walkSpeed*timeDiff)*.2;												caveF.x += (hero.walkSpeed*timeDiff)*.7;						caveM.x += (hero.walkSpeed*timeDiff)*.5;						backCave.x += (hero.walkSpeed*timeDiff)*.1;											}									}			}						if (MovieClip(root).currentFrame == 2) {					//If character is not moving vertically do not scroll				if (hero.dy == 0) {					return;				} else if (moveBackDown) {					caveF.y -= (gamelevelDY)*1.2;					caveM.y -= (gamelevelDY)*.2;					backCave.x -= (gamelevelDY)*.05;							} else if (moveBackUp) {					caveF.y += (gamelevelDY)*1.2;					caveM.y += (gamelevelDY)*.2;					backCave.x += (gamelevelDY)*.05;								}			}					}				// check collisions with enemies, items		public function checkCollisions() {						// enemies			for(var i:int=enemies.length-1;i>=0;i--) {				if (hero.mc.hitTestObject(enemies[i].mc)) {										// is the hero jumping down onto the enemy?					if ((hero.inAir) && (hero.dy > 0)) {						enemyDie(i);					} else {						heroDie();					}				}			}						// items			for(i=otherObjects.length-1;i>=0;i--) {				if (hero.mc.hitTestObject(otherObjects[i])) {					getObject(i);				}			}						for(i=doorObjects.length-1;i>=0;i--) {				if (hero.mc.hitTestObject(doorObjects[i])) {					getDoor(i);				}			}						// Spikes			/*for(i=deathObjects.length-1;i>=0;i--) {				if (hero.mc.hitTestObject(deathObjects[i])) {					heroDie();				}			}*/					} 						// remove enemy		public function enemyDie(enemyNum:int) {			var pb:PointBurst = new PointBurst(gamelevel,"Got Em!",enemies[enemyNum].mc.x,enemies[enemyNum].mc.y-20);			gamelevel.removeChild(enemies[enemyNum].mc);			enemies.splice(enemyNum,1);		}				// enemy got player		public function heroDie() {			// show dialog box			var dialog:Dialog = new Dialog();			dialog.x = 175;			dialog.y = 100;			addChild(dialog);					if (playerLives == 0) {				gameMode = "gameover";				dialog.message.text = "Game Over!";			} else {				gameMode = "dead";				dialog.message.text = "He Got You!";				playerLives--;			}						hero.mc.gotoAndPlay("die");		}				// player collides with objects		public function getObject(objectNum:int) {			// award points for Mushroom			if (otherObjects[objectNum] is Mushroom) {				var pb:PointBurst = new PointBurst(gamelevel,100,otherObjects[objectNum].x,otherObjects[objectNum].y);				gamelevel.removeChild(otherObjects[objectNum]);				otherObjects.splice(objectNum,1);				addScore(100);							// got the key, add to inventory			} else if (otherObjects[objectNum] is Key) {				pb = new PointBurst(gamelevel,"Got Key!" ,otherObjects[objectNum].x,otherObjects[objectNum].y);				playerObjects.push("Key");				trace(playerObjects);				gamelevel.removeChild(otherObjects[objectNum]);				otherObjects.splice(objectNum,1);						// got the feather, add to inventory			} else if (otherObjects[objectNum] is Feather) {				pb = new PointBurst(gamelevel, "Time to Fly!" ,otherObjects[objectNum].x,otherObjects[objectNum].y);				playerObjects.push("Feather");				trace(playerObjects);				gamelevel.removeChild(otherObjects[objectNum]);				otherObjects.splice(objectNum,1);						// Collide with switch			} else if (otherObjects[objectNum] is Switch) {				// Press down to turn on switch				if (hero.climbDown) {					otherObjects[objectNum].gotoAndStop("open");					removeBlock();				}			// got the chest, game won			} else if (otherObjects[objectNum] is Chest) {				otherObjects[objectNum].gotoAndStop("open");				gameComplete();			}							}				// Adter swicth has been flipped, move blocks out of the way		public function removeBlock() {			// Level 2			if (MovieClip(root).currentFrame == 3) {				gamelevel.block1.x = 40;				gamelevel.block2.x = 160;				examineLevel();			// Level 4				} else if (MovieClip(root).currentFrame == 5) {				gamelevel.block1.y = 720;				gamelevel.block2.y = 840;				examineLevel();			// Level 5				} else if (MovieClip(root).currentFrame == 6) {				gamelevel.block1.y = 520;				gamelevel.block2.y = 560;				examineLevel();			// Level 6				} else if (MovieClip(root).currentFrame == 7) {				gamelevel.block1.x = 0;				gamelevel.block2.x = 160;				gamelevel.block3.x = 200;				examineLevel();			// Level 7				} else if (MovieClip(root).currentFrame == 8) {				gamelevel.block1.y = 1040;				gamelevel.block2.y = 1080;				gamelevel.block3.y = 1120;				gamelevel.block4.y = 1160;				examineLevel();			}		}				// hit door, press down to enter and go to correct level based on door number 		public function getDoor(doorNum:int) {			if (playerObjects.indexOf("Key") == -1) return;			// Press down to enter door			if (hero.climbDown) {				if (doorObjects[doorNum].currentFrame == 1) {					doorObjects[doorNum].gotoAndPlay("opening");					// Record door number					if (doorObjects[doorNum] is Door1) {						levelComplete(1);					} else if (doorObjects[doorNum] is Door3) {						levelComplete(3);					} else if (doorObjects[doorNum] is Door4) {						levelComplete(4);					} else if (doorObjects[doorNum] is Door5) {						levelComplete(5);					} else if (doorObjects[doorNum] is Door6) {						levelComplete(6);					} else if (doorObjects[doorNum] is Door7) {						levelComplete(7);					}				}			}		}				// add points to score		public function addScore(numPoints:int) {			gameScore += numPoints;			scoreDisplay.text = String(gameScore);		}				// update player lives		public function showLives() {			livesDisplay.text = String(playerLives);		}				// level over, bring up dialog		public function levelComplete(Door:int) {			// Check door number for correct level 			if (Door == 1) {				gameMode = "lvl1";				var dialog:Dialog = new Dialog();				dialog.x = 175;				dialog.y = 100;				addChild(dialog);				dialog.message.text = "Level Complete!";			} else if (Door == 3) {				gameMode = "lvl3";				dialog = new Dialog();				dialog.x = 175;				dialog.y = 100;				addChild(dialog);				dialog.message.text = "Level Complete!";			} else if (Door == 4) {				gameMode = "lvl4";				dialog = new Dialog();				dialog.x = 175;				dialog.y = 100;				addChild(dialog);				dialog.message.text = "Level Complete!";			} else if (Door == 5) {				gameMode = "lvl5";				dialog = new Dialog();				dialog.x = 175;				dialog.y = 100;				addChild(dialog);				dialog.message.text = "Level Complete!";			} else if (Door == 6) {				gameMode = "lvl6";				dialog = new Dialog();				dialog.x = 175;				dialog.y = 100;				addChild(dialog);				dialog.message.text = "Level Complete!";			} else if (Door == 7) {				gameMode = "lvl7";				dialog = new Dialog();				dialog.x = 175;				dialog.y = 100;				addChild(dialog);				dialog.message.text = "Level Complete!";			}		}				// game over, bring up dialog		public function gameComplete() {			gameMode = "gameover";			var dialog:Dialog = new Dialog();			dialog.x = 175;			dialog.y = 100;			addChild(dialog);			dialog.message.text = "You Got the Treasure!";		}				// dialog button clicked		public function clickDialogButton(event:MouseEvent) {			removeChild(MovieClip(event.currentTarget.parent));						// new life, restart, or go to next level			if (gameMode == "dead") {				// reset hero				showLives();				hero.mc.x = hero.startx;				hero.mc.y = hero.starty;				gameMode = "play";			} else if (gameMode == "gameover") {				cleanUp();				gotoAndStop("start"); 			// if Levels 1 or 2 go to next frame 				} else if (gameMode == "lvl1") {				cleanUp();				nextFrame();			// if Levels 4, 5, 6, or 7 then go back to level 3			} else if (gameMode == "lvl3") {				cleanUp();				gotoAndStop(4); 			// Go to Level 4				} else if (gameMode == "lvl4") {				cleanUp();				gotoAndStop(5); 			// Go to Level 5				} else if (gameMode == "lvl5") {				cleanUp();				gotoAndStop(6);			// Go to Level 6				} else if (gameMode == "lvl6") {				cleanUp();				gotoAndStop(7);			// Go to Level 7				} else if (gameMode == "lvl7") {				cleanUp();				gotoAndStop(8); 			}			// give stage back the keyboard focus			stage.focus = stage;		}							// clean up game		public function cleanUp() {			removeChild(gamelevel);			this.removeEventListener(Event.ENTER_FRAME,gameLoop);			stage.removeEventListener(KeyboardEvent.KEY_DOWN,keyDownFunction);			stage.removeEventListener(KeyboardEvent.KEY_UP,keyUpFunction);						// remove key and feather from player's inventory			playerObjects.splice("Key");			playerObjects.splice("Feather");						for (var i:int = allObjects.length;i<=0;i++) {				removeChild(allObjects[i]);			}			gamelevel = null;			allObjects = null;					}			}	}